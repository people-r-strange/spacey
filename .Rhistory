summary(district_x)
colSums(is.na(district_x))
new_grade_1718 <- ifelse(is.na(district_x$grade_1718), district_x$grade_1819, district_x$grade_1718)
new_grade_1819 <- ifelse(is.na(district_x$grade_1819), district_x$grade_1718, district_x$grade_1819)
ell <- ifelse(is.na(district_x$actual_enrollment_ell_pk12), 0, district_x$actual_enrollment_ell_pk12)
district_x <- district_x %>% mutate("perc_ell" = actual_enrollment_ell_pk12/actual_enrollment_pk12, "perc_frl" = actual_enrollment_frl_pk12/actual_enrollment_pk12, "perc_swd" = actual_enrollment_swd_pk12/actual_enrollment_pk12, "grade_1718" = new_grade_1718, "grade_1819" = new_grade_1819, region = as.factor(region), actual_enrollment_ell_pk12 = ell)
ggplot(district_x, aes(x = perc_ell, y = school_expenses)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_ell, y = avg_tchr_comp)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = grade_1819, y = perc_ell)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", x = "School Grade '18 - '19",  y = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_frl, y = school_expenses)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp))+
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation",  x = "% of Students who receive Free or Reduced Lunch")
district_x %>% select(perc_frl, avg_tchr_comp) %>% skim()
district_x %>%
summarize(correlation = cor(avg_tchr_comp, perc_frl))
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp))+
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation",  x = "% of Students who receive Free or Reduced Lunch") +
geom_smooth(method = "lm", se = FALSE)
# Fit regression model:
tchr_comp_model <- lm(avg_tchr_comp ~ perc_frl, data = district_x)
# Get regression table:
get_regression_table(tchr_comp_model)
ggplot(district_x, aes(x = grade_1819, y = perc_frl)) +
geom_point() +
labs(title = "School Expenses by Free or Reduced Lunch", x = "School Grade '18 - '19",  y = "% of Studnets who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_swd, y = school_expenses)) +
geom_point() +
labs(title = "School Expenses per Student with a Disability", y = "School Expenses per Pupil (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = perc_swd, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "Average Teacher Compensation per Student with a Disability", y = "Average Teacher Compensation (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = grade_1819, y = perc_swd)) +
geom_point() +
labs(title = "Grade of School vs Percent of  Student with a Disability", y = "% of Students with a disability",  x = "Grade")
ggplot(district_x, aes(x = region, y = school_expenses, color = region)) +
geom_boxplot() +
labs(title = "Boxplot", y = "School Expenses per Pupil (USD)", x = "Region")
ggplot(district_x, aes(x = region, y = avg_tchr_comp, color = region)) +
geom_boxplot() +
labs(title = "Boxplot", y = "Average Teacher Compensaton (USD)", x = "Region")
district_x %>%
group_by(region) %>%
summarize(ELL = sum(actual_enrollment_ell_pk12), SWD = sum(actual_enrollment_swd_pk12), FRL = sum(actual_enrollment_frl_pk12), enrollment = sum(actual_enrollment_pk12)) %>%
mutate(perc_ell = ELL/enrollment *100, perc_swd = SWD/enrollment*100, perc_frl = FRL/enrollment*100)
district_x %>% group_by(region) %>% summarize(count=n())
ggplot(district_x, aes(x = perc_ell, y = school_expenses, color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_ell, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = grade_1819, y = perc_ell,color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", x = "School Grade '18 - '19",  y = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_frl, y = school_expenses, color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp, color = region))+
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = grade_1819, y = perc_frl,color = region)) +
geom_point() +
labs(title = "School Expenses by Free or Reduced Lunch", x = "School Grade '18 - '19",  y = "% of Studnets who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_swd, y = school_expenses, color = region)) +
geom_point() +
labs(title = "School Expenses per Student with a Disability", y = "School Expenses per Pupil (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = perc_swd, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "Average Teacher Compensation per Student with a Disability", y = "Average Teacher Compensation (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = grade_1819, y = perc_swd, color = region)) +
geom_point() +
labs(title = "Grade of School vs Percent of  Student with a Disability", y = "% of Students with a disability",  x = "Grade")
ggplot(district_x, aes(x = grade_1819, y = school_expenses, color = grade_1819)) +
geom_boxplot() +
labs(title = "Boxplot", y = "School Expenses per Pupil (USD)", x = "Grade")
ggplot(district_x, aes(x = grade_1718, y = school_expenses, color = grade_1718)) +
geom_boxplot() +
labs(title = "Boxplot", y = "School Expenses per Pupil (USD)", x = "Grade")
ggplot(district_x, aes(x = grade_1819, y = avg_tchr_comp, color = grade_1819)) +
geom_boxplot() +
labs(title = "Boxplot", y = "Average Teacher Compensation (USD)", x = "Grade")
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp, color = region))+
geom_point() +
labs(title = "Average Teacher Compensation by Perctange of FRL Students", y = "Average Teacher Compensation (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp, color = region))+
geom_point() +
labs(title = "Average Teacher Compensation by Perctange of FRL Students", y = "Average Teacher Compensation (USD)",  x = "% of Students who receive Free or Reduced Lunch") +
geom_smooth(method = "lm", se = FALSE)
district_x %>%
group_by(region)
summarize(correlation = cor(avg_tchr_comp, perc_frl))
district_x %>%
group_by(region) %>%
summarize(correlation = cor(avg_tchr_comp, perc_frl))
# Fit regression model:
tchr_comp_model <- lm(avg_tchr_comp ~ perc_frl*region, data = district_x)
# Get regression table:
get_regression_table(tchr_comp_model)
ggplot(district_x, aes(x = grade_1819, y = perc_frl)) +
geom_point() +
labs(title = "School Grade by Free or Reduced Lunch", x = "School Grade '18 - '19",  y = "% of Studnets who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = grade_1819, y = perc_frl)) +
geom_point() +
labs(title = "School Grade by % of Students Receiving Free or Reduced Lunch", x = "School Grade '18 - '19",  y = "% of Studnets who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = grade_1819, y = perc_frl)) +
geom_point() +
labs(title = "School Grade by % of Students Receiving FRL", x = "School Grade '18 - '19",  y = "% of Studnets who receive Free or Reduced Lunch")
glimpse(district_x)
mod <- aov(school_expenses ~ grade_1819 + frl + choice + turnaround + tite_i + region, data = district_x)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(skimr)
library(moderndive)
district_x <- read_csv("district_x.csv")
summary(district_x)
colSums(is.na(district_x))
new_grade_1718 <- ifelse(is.na(district_x$grade_1718), district_x$grade_1819, district_x$grade_1718)
new_grade_1819 <- ifelse(is.na(district_x$grade_1819), district_x$grade_1718, district_x$grade_1819)
ell <- ifelse(is.na(district_x$actual_enrollment_ell_pk12), 0, district_x$actual_enrollment_ell_pk12)
district_x <- district_x %>% mutate("perc_ell" = actual_enrollment_ell_pk12/actual_enrollment_pk12, "perc_frl" = actual_enrollment_frl_pk12/actual_enrollment_pk12, "perc_swd" = actual_enrollment_swd_pk12/actual_enrollment_pk12, "grade_1718" = new_grade_1718, "grade_1819" = new_grade_1819, region = as.factor(region), actual_enrollment_ell_pk12 = ell)
ggplot(district_x, aes(x = perc_ell, y = school_expenses)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_ell, y = avg_tchr_comp)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = grade_1819, y = perc_ell)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", x = "School Grade '18 - '19",  y = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_frl, y = school_expenses)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp))+
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation",  x = "% of Students who receive Free or Reduced Lunch")
district_x %>% select(perc_frl, avg_tchr_comp) %>% skim()
district_x %>%
group_by(region) %>%
summarize(correlation = cor(avg_tchr_comp, perc_frl))
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp))+
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation",  x = "% of Students who receive Free or Reduced Lunch") +
geom_smooth(method = "lm", se = FALSE)
# Fit regression model:
tchr_comp_model <- lm(avg_tchr_comp ~ perc_frl*region, data = district_x)
# Get regression table:
get_regression_table(tchr_comp_model)
ggplot(district_x, aes(x = grade_1819, y = perc_frl)) +
geom_point() +
labs(title = "School Grade by % of Students Receiving FRL", x = "School Grade '18 - '19",  y = "% of Studnets who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_swd, y = school_expenses)) +
geom_point() +
labs(title = "School Expenses per Student with a Disability", y = "School Expenses per Pupil (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = perc_swd, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "Average Teacher Compensation per Student with a Disability", y = "Average Teacher Compensation (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = grade_1819, y = perc_swd)) +
geom_point() +
labs(title = "Grade of School vs Percent of  Student with a Disability", y = "% of Students with a disability",  x = "Grade")
ggplot(district_x, aes(x = region, y = school_expenses, color = region)) +
geom_boxplot() +
labs(title = "Boxplot", y = "School Expenses per Pupil (USD)", x = "Region")
ggplot(district_x, aes(x = region, y = avg_tchr_comp, color = region)) +
geom_boxplot() +
labs(title = "Boxplot", y = "Average Teacher Compensaton (USD)", x = "Region")
district_x %>%
group_by(region) %>%
summarize(ELL = sum(actual_enrollment_ell_pk12), SWD = sum(actual_enrollment_swd_pk12), FRL = sum(actual_enrollment_frl_pk12), enrollment = sum(actual_enrollment_pk12)) %>%
mutate(perc_ell = ELL/enrollment *100, perc_swd = SWD/enrollment*100, perc_frl = FRL/enrollment*100)
district_x %>% group_by(region) %>% summarize(count=n())
ggplot(district_x, aes(x = perc_ell, y = school_expenses, color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_ell, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "Average Teacher Compensation (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = grade_1819, y = perc_ell,color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", x = "School Grade '18 - '19",  y = "% of English Language Learners in School")
ggplot(district_x, aes(x = perc_frl, y = school_expenses, color = region)) +
geom_point() +
labs(title = "School Expenses per English Language Learners", y = "School Expenses per Pupil (USD)",  x = "% of Students who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_frl, y = avg_tchr_comp, color = region))+
geom_point() +
labs(title = "Average Teacher Compensation by Perctange of FRL Students", y = "Average Teacher Compensation (USD)",  x = "% of Students who receive Free or Reduced Lunch") +
geom_smooth(method = "lm", se = FALSE)
ggplot(district_x, aes(x = grade_1819, y = perc_frl,color = region)) +
geom_point() +
labs(title = "School Expenses by Free or Reduced Lunch", x = "School Grade '18 - '19",  y = "% of Studnets who receive Free or Reduced Lunch")
ggplot(district_x, aes(x = perc_swd, y = school_expenses, color = region)) +
geom_point() +
labs(title = "School Expenses per Student with a Disability", y = "School Expenses per Pupil (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = perc_swd, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "Average Teacher Compensation per Student with a Disability", y = "Average Teacher Compensation (USD)",  x = "% of Students with a disability")
ggplot(district_x, aes(x = grade_1819, y = perc_swd, color = region)) +
geom_point() +
labs(title = "Grade of School vs Percent of  Student with a Disability", y = "% of Students with a disability",  x = "Grade")
ggplot(district_x, aes(x = grade_1819, y = school_expenses, color = grade_1819)) +
geom_boxplot() +
labs(title = "Boxplot", y = "School Expenses per Pupil (USD)", x = "Grade")
ggplot(district_x, aes(x = grade_1718, y = school_expenses, color = grade_1718)) +
geom_boxplot() +
labs(title = "Boxplot", y = "School Expenses per Pupil (USD)", x = "Grade")
ggplot(district_x, aes(x = grade_1819, y = avg_tchr_comp, color = grade_1819)) +
geom_boxplot() +
labs(title = "Boxplot", y = "Average Teacher Compensation (USD)", x = "Grade")
#Turn FRL into categorical variable with four levels low (0-25%), medium (25-50%), high(50%-75%), very high(75%-100%)
district_x <- district_x %>%
# low (0-25%)
mutate(frl = if_else(perc_frl < 0.50, "low",
# medium (25%-50%),
#     if_else(perc_frl < 0.50,"medium",
# high(50%-75%)
if_else(perc_frl < 0.75, "high",
# very high (75%-100%)
if_else(perc_frl < 1, "very high", "N/A")))) %>%
mutate(frl=as.factor(frl))
#Unbalanced data, as you have almost 5x the lowest with the highest. Not sure how comparable this will be.. so will change low definition
district_x %>%
group_by(frl) %>%
summarize(count = n(), mean = mean(avg_tchr_comp), sd = sd(avg_tchr_comp))
4781.091	/ 3656.966
#parallel dot graph
ggplot(district_x, aes(x = grade_1819, y = avg_tchr_comp, color = frl)) +
geom_point() +
geom_jitter() +
labs(title = "Parallel Dot Graph")
ggplot(district_x, aes(x = grade_1819, y = avg_tchr_comp,
color = frl,
group = frl)) +
geom_point() +
geom_smooth(method = "lm", se = 0) +
labs(title = "Interaction Graph")
mod <- aov(avg_tchr_comp ~ grade_1819*frl, data = district_x)
summary(mod)
district_x %>%
group_by(grade_1819,title_i,choice,turnaround) %>%
summarize( count = n())
mod <- aov(school_expenses ~ grade_1819 + frl + choice + turnaround + tite_i + region, data = district_x)
mod <- aov(school_expenses ~ grade_1819 + frl + choice + turnaround + tilte_i + region, data = district_x)
mod <- aov(school_expenses ~ grade_1819 + frl + choice + turnaround + title_i + region, data = district_x)
summary(mod)
ggplot(district_x, aes(x = turnaround, y = avg_tchr_comp, color = turnaround)) +
geom_boxplot() +
labs(title = "Boxplot", y = "Average Teacher Compensation (USD)", x = "Grade")
ggplot(district_x, aes(x = turnaround, y = school_expenses, color = turnaround)) +
geom_boxplot() +
labs(title = "Boxplot", y = "School expenses per pupil (USD)", x = "Grade")
mod <- aov(avg_tchr_comp ~ grade_1819 + frl, data = district_x)
summary(mod)
mod <- aov(avg_tchr_comp ~ grade_1819*frl, data = district_x)
summary(mod)
mod <- aov(school_expenses ~ grade_1819 + frl + choice + turnaround + title_i + region, data = district_x)
summary(mod)
mod <- aov(avg_tchr_comp ~ grade_1819 + frl + choice + turnaround + title_i + region, data = district_x)
summary(mod)
ggplot(district_x, aes(x = perc_ell, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "Average teacher comp per English Language Learners", y = "Average Teacher Compensation (USD)",  x = "% of ELL")
ggplot(district_x, aes(x = perc_ell, y = avg_tchr_comp, color = region)) +
geom_point() +
labs(title = "Average Teacher Comp vs % ELL", y = "Average Teacher Compensation (USD)",  x = "% of ELL")
ggplot(district_x, aes(x = grade_1819, y = avg_tchr_comp, color = grade_1819)) +
geom_boxplot() +
labs(title = "Teachers Compensation vs School Grade", y = "Average Teacher Compensation (USD)", x = "Grade")
ggplot(district_x, aes(x = turnaround, y = school_expenses, color = turnaround)) +
geom_boxplot() +
labs(title = "School Expenses vs TurnAround School", y = "School Expenses per Pupil (USD)", x = "Turn Around School")
ggplot(district_x, aes(x = title_i, y = school_expenses, color = title_i)) +
geom_boxplot() +
labs(title = "School Expenses vs title_i School", y = "School Expenses per Pupil (USD)", x = "Turn Around School")
ggplot(district_x, aes(x = title_i, y = school_expenses, color = title_i)) +
geom_boxplot() +
labs(title = "School Expenses vs title_i School", y = "School Expenses per Pupil (USD)", x = "Title I School")
ggplot(district_x, aes(x = title_i, y = school_expenses, color = title_i)) +
geom_boxplot() +
labs(title = "School Expenses vs Title I School", y = "School Expenses per Pupil (USD)", x = "Title I School")
district_x %>% group_by(title_i) %>%
summarize(count = n())
district_x %>% group_by(title_i) %>%
summarize(count = n(), perc_frl = sum(actual_enrollment_frl_pk12)/sum(actual_enrollment_pk12))
district_x %>% group_by(title_i) %>%
summarize(count = n(), perc_frl = sum(actual_enrollment_frl_pk12)/sum(actual_enrollment_pk12), perc_swd = sum(actual_enrollment_swd_pk12)/sum(actual_enrollment_pk12) )
district_x %>% group_by(title_i) %>%
summarize(count = n(), perc_frl = sum(actual_enrollment_frl_pk12)/sum(actual_enrollment_pk12), perc_swd = sum(actual_enrollment_swd_pk12)/sum(actual_enrollment_pk12),perc_ell = sum(actual_enrollment_ell_pk12)/sum(actual_enrollment_pk12)  )
district_x %>% group_by(turnaround) %>%
summarize(count = n(), perc_frl = sum(actual_enrollment_frl_pk12)/sum(actual_enrollment_pk12), perc_swd = sum(actual_enrollment_swd_pk12)/sum(actual_enrollment_pk12),perc_ell = sum(actual_enrollment_ell_pk12)/sum(actual_enrollment_pk12)  )
district_x %>% group_by(turnaround,frl) %>%
summarize(count = n(), perc_frl = sum(actual_enrollment_frl_pk12)/sum(actual_enrollment_pk12), perc_swd = sum(actual_enrollment_swd_pk12)/sum(actual_enrollment_pk12),perc_ell = sum(actual_enrollment_ell_pk12)/sum(actual_enrollment_pk12)  )
district_x %>% group_by(title_i,frl) %>%
summarize(count = n(), perc_frl = sum(actual_enrollment_frl_pk12)/sum(actual_enrollment_pk12), perc_swd = sum(actual_enrollment_swd_pk12)/sum(actual_enrollment_pk12),perc_ell = sum(actual_enrollment_ell_pk12)/sum(actual_enrollment_pk12)  )
district_x %>% group_by(title_i,frl) %>%
summarize(count = n(), "% FRL" = sum(actual_enrollment_frl_pk12)/sum(actual_enrollment_pk12), "% SWD" = sum(actual_enrollment_swd_pk12)/sum(actual_enrollment_pk12),"% ELL" = sum(actual_enrollment_ell_pk12)/sum(actual_enrollment_pk12)  )
library(tidyverse)
library(dplyr)
library(readxl)
library(stringr)
library(readr)
library(data.table)
library(vroom)
instinstall.packages("vroom")
install.packages("vroom")
library(vroom)
# it would take a lot of time to manually coy and paste each article into r
text <- c("
Alderwood to probe voting machines Story by: Ellie Olmsen Date Published to Web: 11/16/2004 Republicans in Alderwood joined Democrats yesterday in criticizing the performance of the city's costly new high-tech voting system, saying that it may have disenfranchised voters in the Nov. 4 election. The Republican commission scolded the city board of elections for minimizing problems with the touch-screen machines that the city purchased this year for $1.5 million and asked Mayor Rex Luthor to investigate what went wrong before the machines are pressed into service again. Alderwood's touch-screen voting machines, which resemble laptop computers without keyboards, were supposed to simplify voting and tabulating results. But in a debut that mirrored many of the problems experienced last year in areas across the country, some voters found the machines confusing, and the reporting of vote tallies was delayed almost a day. Luthor responded that he would try to address the board's concerns. He said he has called for a public meeting of the three-member board of elections to go over the requests at 5 p.m. today. I pledge that I will answer every question as soon as I possibly can in the proper fashion, he said."
)
# put text in a df
text_df <- data_frame(long_string = text)
# makes each word its own column
word_col <- text_df %>%
unnest_tokens(output = word, input = long_string)
??unnest_tokens
library(tidytext)
# put text in a df
text_df <- data_frame(long_string = text)
# makes each word its own column
word_col <- text_df %>%
unnest_tokens(output = word, input = long_string)
# removes stop words like "the", "and", "before", "after", "such", "as", etc.
no_stops  <- word_col  %>%
anti_join(stop_words)
# finds most common word and counts
common <- no_stops %>%
count(word, sort = TRUE)
common
library(tidyverse)
library(dplyr)
library(readxl)
library(stringr)
library(readr)
library(data.table)
library(vroom)
library(readtext)
library(textrank)
library(tidytext)
library(janeaustenr)
library(tidyr)
library(igraph)
library(ggraph)
# lets see if we can read in all the files in to News Articles folder so we don't have to copy and paste a bunch
dir <- "C:/Users/igome/Documents/Smith/Spring_2021/visual analyticsd/DC1-data\News Articles"
# lets see if we can read in all the files in to News Articles folder so we don't have to copy and paste a bunch
dir <- "C:/Users/igome/Documents/Smith/Spring_2021/visual analyticsd/DC1-data/News Articles"
article
# lets see if we can read in all the files in to News Articles folder so we don't have to copy and paste a bunch
dir <- "C:/Users/igome/Documents/Smith/Spring_2021/visual analyticsd/DC1-data/News Articles"
article = readtext(paste0(dir, "/*.txt"))
article
# put text in a df
text_df <- data_frame(long_string = article)
# makes each word its own column
word_col <- text_df %>%
unnest_tokens(output = word, input = long_string)
# removes stop words like "the", "and", "before", "after", "such", "as", etc.
no_stops  <- word_col  %>%
anti_join(stop_words)
# finds most common word and counts
common <- no_stops %>%
count(word, sort = TRUE)
common
austen_bigrams <- article %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
austen_bigrams
bis <- austen_bigrams %>%
count(bigram, sort = TRUE)
bigrams_separated <- austen_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_separated
bigrams_separated <- austen_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
# new bigram counts:
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
bigram_counts
bigram_counts.head(20)
bigram_counts. %>% head(20)
bigram_counts %>% head(20)
bigram_counts %>% head(10)
bigram_counts %>% tail(10)
View(bigram_counts)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
library(tidyverse)
library(dplyr)
library(readxl)
library(stringr)
library(readr)
library(data.table)
library(vroom)
library(readtext)
library(textrank)
library(tidytext)
library(janeaustenr)
library(tidyr)
library(igraph)
library(ggraph)
conference <- read_excel("/Users/llow/Desktop/DC1-data/City Hall Phone Log/Conference Room Phone Log.xls", sheet = "Sheet1")
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
library(tidyverse)
library(dplyr)
library(readxl)
library(stringr)
library(readr)
library(data.table)
library(vroom)
library(readtext)
library(textrank)
library(tidytext)
library(janeaustenr)
library(tidyr)
library(igraph)
library(ggraph)
conference <- read_excel("/Users/llow/Desktop/DC1-data/City Hall Phone Log/Conference Room Phone Log.xls", sheet = "Sheet1")
# filter for only relatively common combinations
bigram_graph <- bigram_counts %>%
filter(n < 20) %>%
graph_from_data_frame()
bigram_graph
grapho <- ggraph(bigram_graph, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
grapho
install.packages("blogdown")
setwd("~/Smith/Spring_2021/visual analyticsd/data challenge 3")
sensor_data <- read_csv("data/Lekagul Sensor Data.csv")
#renaming columnns
names(sensor_data)[1] <- "DateTime"
names(sensor_data)[2] <- "ID"
names(sensor_data)[3] <- "CarType"
names(sensor_data)[4] <- "GateName"
sensor_data <- read_csv("data/Lekagul Sensor Data.csv")
library(tidyverse)
library(knitr)
sensor_data <- read_csv("data/Lekagul Sensor Data.csv")
names(sensor_data)[1] <- "DateTime"
names(sensor_data)[2] <- "ID"
names(sensor_data)[3] <- "CarType"
names(sensor_data)[4] <- "GateName"
cars_time_spent <- sensor_data %>% group_by(ID) %>% mutate(time_spent = difftime(lead(DateTime),DateTime, unit = "mins"))
no_na <- cars_time_spent %>% drop_na() #nas represent the exit
spent <- no_na %>% group_by(CarType,GateName) %>% mutate(average_time = mean(time_spent), sd = sd(time_spent)) %>% select(GateName, CarType, average_time, sd)
#where do cars go?
unique_cars_time <- distinct(spent)
#camping only
camping_time_spent <- dplyr::filter(cars_time_spent, grepl('camping', GateName))
#ranger only
ranger_time_spent <- dplyr::filter(cars_time_spent, grepl('ranger', GateName))
suspicious_rangers_3 <- sensor_data %>% filter(CarType != "2P", GateName == "ranger-stop3") %>% mutate(date = format(DateTime, "%Y-%m"), time = format(DateTime, "%H:%M"))
truck_id <- sensor_data %>% filter(ID %in% suspicious_rangers_3$ID)
truck_id
View(truck_id)
distinct(truck_id)
View(distinct(truck_id))
View(distinct(truck_id$GateName))
truck_id <- sensor_data %>% filter(ID %in% suspicious_rangers_3$ID) %>% group_by(id) %>% mutate(num_trucks = n()) %>% ungroup() %>% group_by(GateName) %>% mutate(num_times_gate = n())
truck_id <- sensor_data %>% filter(ID %in% suspicious_rangers_3$ID) %>% group_by(ID) %>% mutate(num_trucks = n()) %>% ungroup() %>% group_by(GateName) %>% mutate(num_times_gate = n())
id_time_spent <- sensor_data %>% group_by(ID) %>% mutate(time_spent = difftime(DateTime[nrow(DateTime)], DateTime[1]), unit = "mins")
id_time_spent <- sensor_data %>% group_by(ID) %>% mutate(time_spent = difftime(tail(DateTime), DateTime[1]), unit = "mins")
?tail
id_time_spent <- sensor_data %>% group_by(ID) %>% mutate(time_spent = difftime(tail(DateTime, n = 1L), DateTime[1]), unit = "mins")
View(id_time_spent)
id_time_spent <- sensor_data %>% group_by(ID) %>% mutate(time_spent = difftime(tail(DateTime, n = 1L), DateTime[1], unit = "mins"))
id_time <- ggplot(id_time_spent, aes(x = CarType, y = time_spent)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Time Spent", y = "Time (Min, Military)", x = "Car Type")
ggplotly(id_time)
library(plotly)
ggplotly(id_time)
id_time <- ggplot(id_time_spent, aes(y = time_spent)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Time Spent", y = "Time (Min, Military)", x = "Car Type")
ggplotly(id_time)
ggplot(unique_cars_time, aes(x = GateName , y = average_time, col = CarType)) +
geom_point()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
gate_time_spent <- dplyr::filter(cars_time_spent, grepl('gate', GateName))
gate_time_spent
general_gate_time_spent <- dplyr::filter(cars_time_spent, grepl('general-gate', GateName))
general_gate_time_spent
ggplot(general_gate_time_spent, aes(x = GateName, y = time_spent, col = CarType)) +
geom_boxplot() +
labs(title = "Time Spent in General Gate Sites by Car Type", y = "Time (in minutes)", x = "Gate Name") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
